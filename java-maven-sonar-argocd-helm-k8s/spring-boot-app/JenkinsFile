pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://44.210.144.176:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "pramodholkar/myapp:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "Jenkins_Project"
            GIT_USER_NAME = "Yettobemaster"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "pramodholkar101@gmail.com"
                    git config user.name "Yettobemaster"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  }
}pipeline {
    agent any

    environment {
        SONARQUBE_TOKEN = credentials('sonarqube-token')    // replace with your token ID
        REGISTRY_CREDENTIALS = credentials('dockerhub')      // replace with your DockerHub creds ID
    }

    stages {
        stage('Build & SonarQube Analysis') {
            agent {
                docker {
                    image 'maven:3.9.6-eclipse-temurin-17'
                    args '-v /root/.m2:/root/.m2'
                }
            }
            environment {
                SONAR_HOST_URL = 'http://44.210.144.176:9000'  // your SonarQube URL
            }
            steps {
                echo 'Pramod - SonarQube Analysis Starting'
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    sh '''
                        mvn clean verify sonar:sonar \
                        -Dsonar.projectKey=com.abhishek:spring-boot-demo \
                        -Dsonar.host.url=$SONAR_HOST_URL \
                        -Dsonar.token=$SONARQUBE_TOKEN
                    '''
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                echo 'Pramod - Docker Build Starting'
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    sh '''
                        docker build -t abhishekf5/ultimate-cicd:9 .
                        echo $REGISTRY_CREDENTIALS_PSW | docker login -u $REGISTRY_CREDENTIALS_USR --password-stdin
                        docker push abhishekf5/ultimate-cicd:9
                    '''
                }
            }
        }

        stage('Update Deployment File') {
            when {
                expression {
                    currentBuild.result == null || currentBuild.result == 'SUCCESS'
                }
            }
            steps {
                echo 'Pramod - Updating Deployment File'
                // Add deployment file update logic here
            }
        }
    }

    post {
        failure {
            echo 'Pipeline failed. Please check the logs above.'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
    }
}
