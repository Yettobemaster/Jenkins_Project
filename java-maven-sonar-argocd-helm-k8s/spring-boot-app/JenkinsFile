pipeline {
    agent any

    environment {
        SONARQUBE_TOKEN = credentials('sonarqube-token')    // replace with your token ID
        REGISTRY_CREDENTIALS = credentials('dockerhub')      // replace with your DockerHub creds ID
    }

    stages {
        stage('Build & SonarQube Analysis') {
            agent {
                docker {
                    image 'maven:3.9.6-eclipse-temurin-17'
                    args '-v /root/.m2:/root/.m2'
                }
            }
            environment {
                SONAR_HOST_URL = 'http://44.210.144.176:9000'  // your SonarQube URL
            }
            steps {
                echo 'Pramod - SonarQube Analysis Starting'
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    sh '''
                        mvn clean verify sonar:sonar \
                        -Dsonar.projectKey=com.abhishek:spring-boot-demo \
                        -Dsonar.host.url=$SONAR_HOST_URL \
                        -Dsonar.token=$SONARQUBE_TOKEN
                    '''
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                echo 'Pramod - Docker Build Starting'
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    sh '''
                        docker build -t abhishekf5/ultimate-cicd:9 .
                        echo $REGISTRY_CREDENTIALS_PSW | docker login -u $REGISTRY_CREDENTIALS_USR --password-stdin
                        docker push abhishekf5/ultimate-cicd:9
                    '''
                }
            }
        }

        stage('Update Deployment File') {
            when {
                expression {
                    currentBuild.result == null || currentBuild.result == 'SUCCESS'
                }
            }
            steps {
                echo 'Pramod - Updating Deployment File'
                // Add deployment file update logic here
            }
        }
    }

    post {
        failure {
            echo 'Pipeline failed. Please check the logs above.'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
    }
}
