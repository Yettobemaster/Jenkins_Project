    stages {
        stage('Build & SonarQube Analysis') {
            agent {
                docker {
                    image 'maven:3.9.6-eclipse-temurin-17'
                    args '-v /root/.m2:/root/.m2'
                }
            }
            environment {
                SONAR_HOST_URL = 'http://44.210.144.176:9000'  // your SonarQube URL
            }
            steps {
                echo 'Pramod - SonarQube Analysis Starting'
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    sh '''
                        mvn clean verify sonar:sonar \
                        -Dsonar.projectKey=com.abhishek:spring-boot-demo \
                        -Dsonar.host.url=$SONAR_HOST_URL \
                        -Dsonar.token=$SONARQUBE_TOKEN
                    '''
                }
            }dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    sh '''
                        docker build -t abhishekf5/ultimate-cicd:9 .
                        echo $REGISTRY_CREDENTIALS_PSW | docker login -u $REGISTRY_CREDENTIALS_USR --password-stdin
                        docker push abhishekf5/ultimate-cicd:9
                    '''
                }
				
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://34.201.116.83:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "abhishekf5/ultimate-cicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }				
